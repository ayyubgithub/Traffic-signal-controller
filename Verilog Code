# Verilog Code.

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 02/26/2025 09:52:12 AM
// Design Name: 
// Module Name: Signal_control
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

`define TRUE 1'b1
`define FALSE 1'b0
`define RED 2'd0
`define YELLOW 2'd1
`define GREEN 2'd2

`define S0 3'd0
`define S1 3'd1
`define S2 3'd2
`define S3 3'd3
`define S4 3'd4

`define Y2RDELAY 3
`define R2GDELAY 2

module Signal_control(hwy, cntry, X, clock, clear);
  
  output reg [1:0] hwy, cntry;  // Fixed reg declaration

  input X;
  input clock, clear;

  reg [2:0] state;
  reg [2:0] next_state;
  reg [3:0] counter;  // Added counter for delay implementation

  initial begin
    state = `S0;
    next_state = `S0;
    hwy = `GREEN;
    cntry = `RED;
  end

  always @(posedge clock)
    state <= next_state;  // Fixed non-blocking assignment

  always @(state) begin
    case (state)
      `S0: begin 
          hwy = `GREEN;
          cntry = `RED;
      end
      `S1: begin 
          hwy = `YELLOW; 
          cntry = `RED; 
      end
      `S2: begin 
          hwy = `RED;
          cntry = `RED;
      end
      `S3: begin
          hwy = `RED;
          cntry = `GREEN;
      end
      `S4: begin 
          hwy = `RED;
          cntry = `YELLOW;
      end
      default: begin  // Added default case
          hwy = `RED;
          cntry = `RED;
      end
    endcase 
  end

  always @(state or clear or X) begin 
    if (clear)
      next_state = `S0;
    else begin
      case (state)
        `S0: if (X)
          next_state = `S1;
        else
          next_state = `S0;
        
        `S1: begin
          counter = 0;
          while (counter < `Y2RDELAY) counter = counter + 1; 
          next_state = `S2;
        end

        `S2: begin
          counter = 0;
          while (counter < `R2GDELAY) counter = counter + 1;  
          next_state = `S3;
        end
        
        `S3: if (X)
          next_state = `S3;
        else
          next_state = `S4;
        
        `S4: begin
          counter = 0;
          while (counter < `Y2RDELAY) counter = counter + 1; 
          next_state = `S0;
        end

        default: next_state = `S0;
      endcase
    end
  end

endmodule
